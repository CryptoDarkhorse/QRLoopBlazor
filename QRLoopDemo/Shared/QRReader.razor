@using BlazorZXingJs

@inject IJSRuntime JsRunTime
@inject NavigationManager NavManager
@inject AppState appState

<style>
    .box {
        position:absolute;
        top:0px;
        right:0px;
        bottom:0px;
        left:0px;
        width:100%;
        height:100%;
    }

    .progress {
        width: 100px;
        height: 100px !important;
        float: left; 
        line-height: 100px;
        background: none;
        margin: 10px;
        box-shadow: none;
        position: absolute;
        top:70%;
        left: 50%;
        z-index:1;
    }
    .progress:after {
        content: "";
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 12px solid #fff;
        position: absolute;
        top: 0;
        left: 0;
    }
    .progress>span {
        width: 50%;
        height: 100%;
        overflow: hidden;
        position: absolute;
        top: 0;
        z-index: 1;
    }
    .progress .progress-left {
        left: 0;
    }
    .progress .progress-bar {
        width: 100%;
        height: 100%;
        background: none;
        border-width: 12px;
        border-style: solid;
        position: absolute;
        top: 0;
    }
    .progress .progress-left .progress-bar {
        left: 100%;
        border-top-right-radius: 80px;
        border-bottom-right-radius: 80px;
        border-left: 0;
        -webkit-transform-origin: center left;
        transform-origin: center left;
    }
    .progress .progress-right {
        right: 0;
    }
    .progress .progress-right .progress-bar {
        left: -100%;
        border-top-left-radius: 80px;
        border-bottom-left-radius: 80px;
        border-right: 0;
        -webkit-transform-origin: center right;
        transform-origin: center right;
        animation: loading-1 1.8s linear forwards;
    }
    .progress .progress-value {
        width: 90%;
        height: 90%;
        border-radius: 50%;
        font-size: 24px;
        line-height: 90px;
        text-align: center;
        position: absolute;
        top: 5%;
        left: 5%;
    }
    .progress.blue .progress-bar {
        border-color: #049dff;
    }
    .progress.blue .progress-right .progress-bar {
        -webkit-transform: rotate(@progressAngle1);
        transform: rotate(@progressAngle1);
    }
    .progress.blue .progress-left .progress-bar {
        -webkit-transform: rotate(@progressAngle2);
        transform: rotate(@progressAngle2);
    }
</style>

<MultiFormatReader
    class="box"
    OnBarcodeRead="BarcodeRead">
    <VideoForbidden>
        <h4>no permission for videodevice</h4>
    </VideoForbidden>

    <NoVideoDevices>
        <h4>no devices available</h4>
    </NoVideoDevices>
</MultiFormatReader>

<div class="progress blue">
    <span class="progress-left">
        <span class="progress-bar"></span>
    </span>
    <span class="progress-right">
        <span class="progress-bar"></span>
    </span>
    <div class="progress-value">@progress%</div>
</div>

@code {
    private string? LocalBarcodeText;
    private Object? frames;
    private double progress = 0;
    private string progressAngle1 = "0deg";
    private string progressAngle2 = "0deg";

    private async void BarcodeRead(string code)
    {
        Object[] res = await JsRunTime.InvokeAsync<Object[]>("MyLib.ParseFrames", new Object?[] { frames, code });

        if ("1".Equals(res[0].ToString()))
        {
            appState.CapturedMessage = res[1].ToString();
            NavManager.NavigateTo("/scanresult");
        } 
        else
        {
            frames = res[1];
            progress = await JsRunTime.InvokeAsync<double>("MyLib.GetProgress", new Object?[] { frames });
            progress = Math.Floor(progress * 100);

            double angle = 360.0 * progress / 100.0;

            if (angle > 180.0) {
                progressAngle1 = "180deg";
                progressAngle2 = (angle - 180.0).ToString() + "deg";
            } else
            {
                progressAngle1 = angle.ToString() + "deg";
            }
        }
        StateHasChanged();
    }
}